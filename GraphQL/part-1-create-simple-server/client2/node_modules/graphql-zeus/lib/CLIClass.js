"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CLI = void 0;
const fs = require("fs");
const path = require("path");
const graphql_zeus_core_1 = require("graphql-zeus-core");
const graphql_zeus_jsonschema_1 = require("graphql-zeus-jsonschema");
const graphql_js_tree_1 = require("graphql-js-tree");
const stuccoSubscriptions_1 = require("./plugins/stuccoSubscriptions");
const typedDocumentNode_1 = require("./plugins/typedDocumentNode");
const Utils_1 = require("./Utils");
class CLI {
}
exports.CLI = CLI;
_a = CLI;
CLI.execute = (args) => __awaiter(void 0, void 0, void 0, function* () {
    const env = args.node ? 'node' : 'browser';
    let schemaFileContents = '';
    const allArgs = args._;
    const schemaFile = allArgs[0];
    let host;
    if (schemaFile.startsWith('http://') || schemaFile.startsWith('https://')) {
        const { header } = args;
        host = schemaFile;
        schemaFileContents = yield Utils_1.Utils.getFromUrl(schemaFile, header);
    }
    schemaFileContents = schemaFileContents || fs.readFileSync(schemaFile).toString();
    const pathToFile = allArgs[1] || '';
    const tree = graphql_js_tree_1.Parser.parse(schemaFileContents);
    if (args.graphql) {
        const schemaPath = args.graphql.endsWith('.graphql') || args.graphql.endsWith('.gql')
            ? args.graphql
            : path.join(args.graphql, 'schema.graphql');
        const pathToSchema = path.dirname(schemaPath);
        const schemaFile = path.basename(schemaPath);
        writeFileRecursive(pathToSchema, schemaFile, schemaFileContents);
    }
    if (args.jsonSchema) {
        const schemaPath = args.jsonSchema.endsWith('.json')
            ? args.jsonSchema
            : path.join(args.jsonSchema, 'schema.json');
        const pathToSchema = path.dirname(schemaPath);
        const schemaFile = path.basename(schemaPath);
        const content = graphql_zeus_jsonschema_1.TreeToJSONSchema.parse(tree);
        writeFileRecursive(pathToSchema, schemaFile, JSON.stringify(content, null, 4));
    }
    const typeScriptDefinition = graphql_zeus_core_1.TranslateGraphQL.typescriptSplit({
        schema: schemaFileContents,
        env,
        host,
        esModule: !!args.esModule,
        subscriptions: args.subscriptions === 'graphql-ws' ? 'graphql-ws' : 'legacy',
    });
    Object.keys(typeScriptDefinition).forEach((k) => writeFileRecursive(path.join(pathToFile, 'zeus'), `${k}.ts`, typeScriptDefinition[k]));
    if (args.stuccoSubscriptions) {
        writeFileRecursive(path.join(pathToFile, 'zeus'), `stuccoSubscriptions.ts`, (0, stuccoSubscriptions_1.pluginStucco)({ tree }).ts);
    }
    if (args.typedDocumentNode) {
        writeFileRecursive(path.join(pathToFile, 'zeus'), `typedDocumentNode.ts`, typedDocumentNode_1.pluginTypedDocumentNode);
    }
});
function writeFileRecursive(pathToFile, filename, data) {
    fs.mkdirSync(pathToFile, { recursive: true });
    fs.writeFileSync(path.join(pathToFile, filename), data);
}
//# sourceMappingURL=CLIClass.js.map