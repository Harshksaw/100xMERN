"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveModelTypes = exports.MODEL_TYPES = void 0;
const description_1 = require("../shared/description");
const field_1 = require("../shared/field");
const graphql_js_tree_1 = require("graphql-js-tree");
exports.MODEL_TYPES = 'ModelTypes';
const resolveTypeFromRoot = (i, rootNodes) => {
    if (i.data.type === graphql_js_tree_1.TypeSystemDefinition.DirectiveDefinition) {
        return '';
    }
    if (i.data.type === graphql_js_tree_1.TypeDefinition.EnumTypeDefinition) {
        return `["${i.name}"]:${i.name}`;
    }
    if (i.data.type === graphql_js_tree_1.TypeDefinition.ScalarTypeDefinition) {
        return `${(0, description_1.plusDescription)(i.description)}["${i.name}"]:any`;
    }
    if (!i.args || !i.args.length) {
        return ``;
    }
    if (i.data.type === graphql_js_tree_1.TypeDefinition.InterfaceTypeDefinition) {
        const typesImplementing = rootNodes.filter((rn) => rn.interfaces && rn.interfaces.includes(i.name));
        return `${(0, description_1.plusDescription)(i.description)}["${i.name}"]: ${typesImplementing.length > 0 ? typesImplementing.map((ti) => `${exports.MODEL_TYPES}["${ti.name}"]`).join(' | ') : 'never'}`;
    }
    if (i.data.type === graphql_js_tree_1.TypeDefinition.UnionTypeDefinition) {
        return `${(0, description_1.plusDescription)(i.description)}["${i.name}"]:${i.args
            .map((f) => `${exports.MODEL_TYPES}["${f.name}"]`)
            .join(' | ')}`;
    }
    if (i.data.type !== graphql_js_tree_1.TypeDefinition.ObjectTypeDefinition) {
        return `${(0, description_1.plusDescription)(i.description)}["${i.name}"]: {\n${i.args
            .map((f) => (0, field_1.resolveField)(f, exports.MODEL_TYPES))
            .join(',\n')}\n}`;
    }
    return `${(0, description_1.plusDescription)(i.description)}["${i.name}"]: {\n\t${i.args
        .map((f) => (0, field_1.resolveField)(f, exports.MODEL_TYPES))
        .join(',\n')}\n}`;
};
const resolveModelTypes = (rootNodes) => {
    return `export type ${exports.MODEL_TYPES} = {
    ${rootNodes
        .map((f) => resolveTypeFromRoot(f, rootNodes))
        .filter((v) => v)
        .join(';\n\t')}
    }`;
};
exports.resolveModelTypes = resolveModelTypes;
//# sourceMappingURL=index.js.map