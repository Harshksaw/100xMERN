"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveField = exports.resolveFieldType = void 0;
const models_1 = require("../returnedTypes/models");
const description_1 = require("./description");
const primitive_1 = require("./primitive");
const graphql_js_tree_1 = require("graphql-js-tree");
const resolveFieldType = (name, fType, fn = (x) => x, isRequired = false) => {
    if (fType.type === graphql_js_tree_1.Options.name) {
        return fn(isRequired ? name : `${name} | undefined`);
    }
    if (fType.type === graphql_js_tree_1.Options.array) {
        return (0, exports.resolveFieldType)(name, fType.nest, isRequired ? (x) => `Array<${fn(x)}>` : (x) => `Array<${fn(x)}> | undefined`, false);
    }
    if (fType.type === graphql_js_tree_1.Options.required) {
        return (0, exports.resolveFieldType)(name, fType.nest, fn, true);
    }
    throw new Error('Invalid field type');
};
exports.resolveFieldType = resolveFieldType;
const resolveField = (f, t = models_1.TYPES) => {
    const isNullType = (type) => {
        return f.type.fieldType.type === graphql_js_tree_1.Options.required ? `: ${type}` : `?: ${type}`;
    };
    return `${(0, description_1.plusDescription)(f.description, '\t')}\t${f.name}${isNullType((0, exports.resolveFieldType)((0, primitive_1.toTypeScriptPrimitive)((0, graphql_js_tree_1.getTypeName)(f.type.fieldType), t), f.type.fieldType))}`;
};
exports.resolveField = resolveField;
//# sourceMappingURL=field.js.map