"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveValueTypes = exports.resolveValueType = void 0;
const truthy_1 = require("../truthy");
const graphql_js_tree_1 = require("graphql-js-tree");
const arg_1 = require("./arg");
const description_1 = require("../shared/description");
const models_1 = require("./models");
const AliasType = (code) => `AliasType<${code}>`;
const resolveValueTypeFromRoot = (i, rootNodes, enumsAndScalars) => {
    if (!i.args || !i.args.length) {
        return `["${i.name}"]:unknown`;
    }
    if (i.data.type === graphql_js_tree_1.TypeDefinition.UnionTypeDefinition) {
        return `["${i.name}"]: ${AliasType(`{${i.args
            .map((f) => `\t\t["...on ${(0, graphql_js_tree_1.getTypeName)(f.type.fieldType)}"] : ${models_1.VALUETYPES}["${(0, graphql_js_tree_1.getTypeName)(f.type.fieldType)}"]`)
            .join(',\n')}\n\t\t__typename?: ${truthy_1.truthyType}\n}`)}`;
    }
    if (i.data.type === graphql_js_tree_1.TypeDefinition.EnumTypeDefinition) {
        return `["${i.name}"]:${i.name}`;
    }
    if (i.data.type === graphql_js_tree_1.TypeDefinition.InputObjectTypeDefinition) {
        return `["${i.name}"]: {\n${i.args.map((f) => (0, arg_1.resolveArg)(f)).join(',\n')}\n}`;
    }
    if (i.data.type === graphql_js_tree_1.TypeDefinition.InterfaceTypeDefinition) {
        const typesImplementing = rootNodes.filter((rn) => rn.interfaces && rn.interfaces.includes(i.name));
        return `["${i.name}"]:${AliasType(`{
\t${i.args.map((f) => (0, arg_1.resolveValueField)(f, enumsAndScalars)).join(',\n')};\n\t\t${typesImplementing
            .map((f) => `['...on ${f.name}']?: Omit<${(0, arg_1.createValueType)(f.name)},keyof ${(0, arg_1.createValueType)(i.name)}>;`)
            .join('\n\t\t')}\n\t\t__typename?: ${truthy_1.truthyType}\n}`)}`;
    }
    if (i.data.type === graphql_js_tree_1.TypeDefinition.ObjectTypeDefinition) {
        return `["${i.name}"]: ${AliasType(`{\n${i.args.map((f) => (0, arg_1.resolveValueField)(f, enumsAndScalars)).join(',\n')},\n\t\t__typename?: ${truthy_1.truthyType}\n}`)}`;
    }
    return ``;
};
const resolveValueType = (i, rootNodes, enumsAndScalars) => {
    if (i.data.type === graphql_js_tree_1.TypeSystemDefinition.DirectiveDefinition ||
        i.data.type === graphql_js_tree_1.TypeSystemDefinition.SchemaDefinition) {
        return '';
    }
    if (i.data.type === graphql_js_tree_1.Helpers.Comment) {
        return '';
    }
    const output = resolveValueTypeFromRoot(i, rootNodes, enumsAndScalars);
    return `${(0, description_1.plusDescription)(i.description)}${output}`;
};
exports.resolveValueType = resolveValueType;
const resolveValueTypes = (rootNodes) => {
    const enumsAndScalars = rootNodes
        .filter((n) => { var _a, _b; return ((_a = n.data) === null || _a === void 0 ? void 0 : _a.type) === graphql_js_tree_1.TypeDefinition.EnumTypeDefinition || ((_b = n.data) === null || _b === void 0 ? void 0 : _b.type) === graphql_js_tree_1.TypeDefinition.ScalarTypeDefinition; })
        .map((n) => n.name);
    return `export type ${models_1.VALUETYPES} = {
    ${rootNodes
        .map((f) => (0, exports.resolveValueType)(f, rootNodes, enumsAndScalars))
        .filter((v) => v)
        .join(';\n\t')}
  }`;
};
exports.resolveValueTypes = resolveValueTypes;
//# sourceMappingURL=index.js.map