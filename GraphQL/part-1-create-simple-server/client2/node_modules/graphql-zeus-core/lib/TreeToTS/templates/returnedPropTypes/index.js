"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolvePropTypeFromRoot = void 0;
const graphql_js_tree_1 = require("graphql-js-tree");
const resolveArg = (f, tabs = '\t\t\t') => {
    const { type: { fieldType }, } = f;
    const fType = (0, graphql_js_tree_1.getTypeName)(fieldType);
    if (Object.keys(graphql_js_tree_1.ScalarTypes).includes(fType)) {
        return '';
    }
    return `${tabs}${f.name}:"${fType}"`;
};
const resolveField = (f) => {
    const { args, name } = f;
    return `\t\t${name}:{\n${args
        .map((a) => resolveArg(a))
        .filter((f) => !!f)
        .join(',\n')}\n\t\t}`;
};
const resolvePropTypeFromRoot = (i) => {
    if (i.data.type === graphql_js_tree_1.TypeSystemDefinition.DirectiveDefinition) {
        return '';
    }
    if (i.data.type === graphql_js_tree_1.TypeDefinition.EnumTypeDefinition) {
        return `\t${i.name}: "enum" as const`;
    }
    if (i.data.type === graphql_js_tree_1.TypeDefinition.ScalarTypeDefinition) {
        return `\t${i.name}: \`scalar.${i.name}\` as const`;
    }
    if (i.data.type === graphql_js_tree_1.TypeDefinition.InputObjectTypeDefinition) {
        return `\t${i.name}:{\n${i.args
            .map((f) => resolveArg(f, '\t\t'))
            .filter((f) => !!f)
            .join(',\n')}\n\t}`;
    }
    if (!i.args.length) {
        return '';
    }
    if (i.args.filter((f) => f.args && f.args.length > 0).length === 0) {
        return '';
    }
    return `\t${i.name}:{\n${i.args
        .filter((f) => f.args && f.args.length)
        .map((f) => resolveField(f))
        .filter((f) => !!f)
        .join(',\n')}\n\t}`;
};
exports.resolvePropTypeFromRoot = resolvePropTypeFromRoot;
//# sourceMappingURL=index.js.map