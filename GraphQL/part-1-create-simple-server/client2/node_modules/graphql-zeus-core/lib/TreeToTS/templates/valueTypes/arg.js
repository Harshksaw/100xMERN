"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveValueField = exports.resolveValueFieldType = exports.createValueType = exports.resolveArg = void 0;
const description_1 = require("../shared/description");
const primitive_1 = require("../shared/primitive");
const truthy_1 = require("../truthy");
const models_1 = require("./models");
const graphql_js_tree_1 = require("graphql-js-tree");
const orVar = (name) => `${name} | Variable<any, string>`;
const resolveArg = (f) => {
    const { type: { fieldType }, } = f;
    const isRequiredName = (name) => {
        if (fieldType.type === graphql_js_tree_1.Options.required) {
            return name;
        }
        return `${name}?`;
    };
    const resolveArgsName = (name) => {
        return isRequiredName(name) + ': ';
    };
    const typeName = (0, graphql_js_tree_1.getTypeName)(f.type.fieldType);
    const tsp = (0, primitive_1.toTypeScriptPrimitive)(typeName);
    return `${(0, description_1.plusDescription)(f.description, '\t')}\t${resolveArgsName(f.name)}${orVar((0, exports.resolveValueFieldType)((0, primitive_1.isTypeScriptPrimitive)(typeName) ? tsp : (0, exports.createValueType)(typeName), f.type.fieldType))}`;
};
exports.resolveArg = resolveArg;
const createValueType = (t) => `${models_1.VALUETYPES}["${t}"]`;
exports.createValueType = createValueType;
const resolveValueFieldType = (name, fType, fn = (x) => x, isRequired = false) => {
    if (fType.type === graphql_js_tree_1.Options.name) {
        return fn(isRequired ? name : `${name} | undefined | null`);
    }
    if (fType.type === graphql_js_tree_1.Options.array) {
        return (0, exports.resolveValueFieldType)(name, fType.nest, isRequired ? (x) => `Array<${fn(x)}>` : (x) => `Array<${fn(x)}> | undefined | null`, false);
    }
    if (fType.type === graphql_js_tree_1.Options.required) {
        return (0, exports.resolveValueFieldType)(name, fType.nest, fn, true);
    }
    throw new Error('Invalid field type');
};
exports.resolveValueFieldType = resolveValueFieldType;
const resolveValueField = (f, enumsAndScalars) => {
    const { args } = f;
    const typeName = (0, graphql_js_tree_1.getTypeName)(f.type.fieldType);
    const resolvedTypeName = (0, primitive_1.isTypeScriptPrimitive)(typeName) || enumsAndScalars.includes(typeName) ? truthy_1.truthyType : (0, exports.createValueType)(typeName);
    if (args && args.length) {
        return `${f.name}?: [{${args.map(exports.resolveArg).join(',')}},${resolvedTypeName}]`;
    }
    return `${(0, description_1.plusDescription)(f.description, '\t')}\t${`${f.name}?` + ':'}${resolvedTypeName}`;
};
exports.resolveValueField = resolveValueField;
//# sourceMappingURL=arg.js.map