import { chainOptions, FetchFunction, SubscriptionFunction } from "./models";
import { AliasType, ScalarResolver } from "./types";
import { Variable } from "./variableExtract";
export declare const AllTypesProps: {
    Query: {
        cardByStatus: {
            status: string;
        };
        cards: {
            attack: string;
        };
    };
    Mutation: {
        createCard: {
            card: string;
        };
    };
    Card: {
        attack: {
            by: string;
        };
    };
    CreateCard: {
        status: string;
        settings: string;
    };
    Status: "enum";
    TypeOfAttack: "enum";
    JSON: "scalar.JSON";
};
export declare const ReturnTypes: {
    Query: {
        cardByStatus: string;
        drawCard: string;
        cards: string;
    };
    Mutation: {
        getCardAndPop: string;
    };
    Card: {
        attack: string;
        info: string;
    };
    JSON: "scalar.JSON";
};
export declare const Ops: {
    query: "Query";
    mutation: "Mutation";
};
export declare type ZEUS_INTERFACES = GraphQLTypes['Nameable'];
export declare type ZEUS_UNIONS = GraphQLTypes['ChangeCard'];
export declare type ZEUS_VARIABLES = {
    ['createCard']: ValueTypes['createCard'];
    ['JSON']: ValueTypes['JSON'];
};
export declare type ValueTypes = {
    ['Nameable']: AliasType<{
        name?: boolean | Variable<any, string>;
        ['...on EffectCard']?: Omit<ValueTypes['EffectCard'], keyof ValueTypes['Nameable']>;
        ['...on Card']?: Omit<ValueTypes['Card'], keyof ValueTypes['Nameable']>;
        ['...on SpecialCard']?: Omit<ValueTypes['SpecialCard'], keyof ValueTypes['Nameable']>;
        ['...on CardStack']?: Omit<ValueTypes['CardStack'], keyof ValueTypes['Nameable']>;
        __typename?: boolean | Variable<any, string>;
    }>;
    ['JSON']: 'unknown';
    ['S3Object']: AliasType<{
        bucket?: boolean | Variable<any, string>;
        key?: boolean | Variable<any, string>;
        region?: boolean | Variable<any, string>;
        __typename?: boolean | Variable<any, string>;
    }>;
    ['ChangeCard']: AliasType<{
        ['...on SpecialCard']: ValueTypes['SpecialCard'];
        ['...on EffectCard']: ValueTypes['EffectCard'];
        __typename?: boolean | Variable<any, string>;
    }>;
    ['EffectCard']: AliasType<{
        effectSize?: boolean | Variable<any, string>;
        name?: boolean | Variable<any, string>;
        __typename?: boolean | Variable<any, string>;
    }>;
    ['Subscription']: AliasType<{
        deck?: ValueTypes['Card'];
        __typename?: boolean | Variable<any, string>;
    }>;
    ['Query']: AliasType<{
        cardById?: [{
            cardId?: string | undefined | null;
        }, ValueTypes['Card']];
        drawCard?: ValueTypes['Card'];
        drawChangeCard?: ValueTypes['ChangeCard'];
        listCards?: ValueTypes['Card'];
        myStacks?: ValueTypes['CardStack'];
        nameables?: ValueTypes['Nameable'];
        __typename?: boolean | Variable<any, string>;
    }>;
    ['Card']: AliasType<{
        Attack?: boolean | Variable<any, string>;
        Children?: boolean | Variable<any, string>;
        Defense?: boolean | Variable<any, string>;
        attack?: [
            {
                cardID: string[] | undefined | null;
            },
            ValueTypes['Card']
        ];
        cardImage?: ValueTypes['S3Object'];
        description?: boolean | Variable<any, string>;
        id?: boolean | Variable<any, string>;
        image?: boolean | Variable<any, string>;
        info?: boolean | Variable<any, string>;
        name?: boolean | Variable<any, string>;
        skills?: boolean | Variable<any, string>;
        __typename?: boolean | Variable<any, string>;
    }>;
    ['SpecialSkills']: SpecialSkills;
    ['SpecialCard']: AliasType<{
        effect?: boolean | Variable<any, string>;
        name?: boolean | Variable<any, string>;
        __typename?: boolean | Variable<any, string>;
    }>;
    ['Mutation']: AliasType<{
        addCard?: [{
            card: ValueTypes['createCard'];
        }, ValueTypes['Card']];
        __typename?: boolean | Variable<any, string>;
    }>;
    ['CardStack']: AliasType<{
        cards?: ValueTypes['Card'];
        name?: boolean | Variable<any, string>;
        __typename?: boolean | Variable<any, string>;
    }>;
    ['createCard']: {
        Defense: number;
        skills?: ValueTypes['SpecialSkills'][];
        name: string;
        description: string;
        Children?: number | undefined | null;
        Attack: number;
    };
};
export declare type ModelTypes = {
    ['Nameable']: ModelTypes['EffectCard'] | ModelTypes['Card'] | ModelTypes['SpecialCard'] | ModelTypes['CardStack'];
    ['S3Object']: {
        bucket: string;
        key: string;
        region: string;
    };
    ['ChangeCard']: ModelTypes['SpecialCard'] | ModelTypes['EffectCard'];
    ['EffectCard']: {
        effectSize: number;
        name: string;
    };
    ['Subscription']: {
        deck?: Array<GraphQLTypes['Card']> | undefined;
    };
    ['Query']: {
        cardById?: GraphQLTypes['Card'] | undefined;
        drawCard: GraphQLTypes['Card'];
        drawChangeCard: GraphQLTypes['ChangeCard'];
        listCards: Array<GraphQLTypes['Card']>;
        myStacks?: Array<GraphQLTypes['CardStack']> | undefined;
        nameables: Array<GraphQLTypes['Nameable']>;
    };
    ['Card']: {
        Attack: number;
        Children?: number | undefined;
        Defense: number;
        attack?: Array<GraphQLTypes['Card']> | undefined;
        cardImage?: GraphQLTypes['S3Object'] | undefined;
        description: string;
        id: string;
        image: string;
        info?: GraphQLTypes['JSON'] | undefined;
        name: string;
        skills?: Array<GraphQLTypes['SpecialSkills']> | undefined;
    };
    ['JSON']: unknown;
    ['SpecialSkills']: GraphQLTypes['SpecialSkills'];
    ['SpecialCard']: {
        effect: string;
        name: string;
    };
    ['Mutation']: {
        addCard: GraphQLTypes['Card'];
    };
    ['CardStack']: {
        cards?: Array<GraphQLTypes['Card']> | undefined;
        name: string;
    };
    ['createCard']: GraphQLTypes['createCard'];
};
export declare type GraphQLTypes = {
    ['Nameable']: {
        __typename: 'EffectCard' | 'Card' | 'SpecialCard' | 'CardStack';
        name: string;
        ['...on EffectCard']: '__union' & GraphQLTypes['EffectCard'];
        ['...on Card']: '__union' & GraphQLTypes['Card'];
        ['...on SpecialCard']: '__union' & GraphQLTypes['SpecialCard'];
        ['...on CardStack']: '__union' & GraphQLTypes['CardStack'];
    };
    ['S3Object']: {
        __typename: 'S3Object';
        bucket: string;
        key: string;
        region: string;
    };
    ['JSON']: 'scalar' & {
        name: 'JSON';
    };
    ['ChangeCard']: {
        __typename: 'SpecialCard' | 'EffectCard';
        ['...on SpecialCard']: '__union' & GraphQLTypes['SpecialCard'];
        ['...on EffectCard']: '__union' & GraphQLTypes['EffectCard'];
    };
    ['EffectCard']: {
        __typename: 'EffectCard';
        effectSize: number;
        name: string;
    };
    ['Subscription']: {
        __typename: 'Subscription';
        deck?: Array<GraphQLTypes['Card']> | undefined;
    };
    ['Query']: {
        __typename: 'Query';
        cardById?: GraphQLTypes['Card'] | undefined;
        drawCard: GraphQLTypes['Card'];
        drawChangeCard: GraphQLTypes['ChangeCard'];
        listCards: Array<GraphQLTypes['Card']>;
        myStacks?: Array<GraphQLTypes['CardStack']> | undefined;
        nameables: Array<GraphQLTypes['Nameable']>;
    };
    ['Card']: {
        __typename: 'Card';
        Attack: number;
        Children?: number | undefined;
        Defense: number;
        attack?: Array<GraphQLTypes['Card']> | undefined;
        cardImage?: GraphQLTypes['S3Object'] | undefined;
        description: string;
        id: string;
        image: string;
        info?: GraphQLTypes['JSON'] | undefined;
        name: string;
        skills?: Array<GraphQLTypes['SpecialSkills']> | undefined;
    };
    ['SpecialSkills']: SpecialSkills;
    ['SpecialCard']: {
        __typename: 'SpecialCard';
        effect: string;
        name: string;
    };
    ['Mutation']: {
        __typename: 'Mutation';
        addCard: GraphQLTypes['Card'];
    };
    ['CardStack']: {
        __typename: 'CardStack';
        cards?: Array<GraphQLTypes['Card']> | undefined;
        name: string;
    };
    ['createCard']: {
        Defense: number;
        skills?: Array<GraphQLTypes['SpecialSkills']> | undefined;
        name: string;
        description: string;
        Children?: number | undefined;
        Attack: number;
    };
};
export declare const enum SpecialSkills {
    THUNDER = "THUNDER",
    RAIN = "RAIN",
    FIRE = "FIRE"
}
export declare type ScalarCoders = {
    JSON?: ScalarResolver;
};
export declare const apiSubscription: (opts: chainOptions) => SubscriptionFunction;
export declare const apiFetch: (options: chainOptions) => FetchFunction;
export declare const HOST = "https://faker.graphqleditor.com/a-team/olympus/graphql";
export declare const HEADERS: {};
export declare type ResolverInputTypes = {
    ['Query']: AliasType<{
        cardById?: [{
            cardId?: string | undefined | null;
        }, ResolverInputTypes['Card']];
        drawCard?: ResolverInputTypes['Card'];
        drawChangeCard?: ResolverInputTypes['ChangeCard'];
        listCards?: ResolverInputTypes['Card'];
        myStacks?: ResolverInputTypes['CardStack'];
        nameables?: ResolverInputTypes['Nameable'];
        __typename?: boolean | `@${string}`;
    }>;
    ['SpecialSkills']: SpecialSkills;
    ['EffectCard']: AliasType<{
        effectSize?: boolean | `@${string}`;
        name?: boolean | `@${string}`;
        __typename?: boolean | `@${string}`;
    }>;
    ['createCard']: {
        skills?: Array<ResolverInputTypes['SpecialSkills']> | undefined | null;
        name: string;
        description: string;
        Children?: number | undefined | null;
        Attack: number;
        Defense: number;
    };
    ['S3Object']: AliasType<{
        bucket?: boolean | `@${string}`;
        key?: boolean | `@${string}`;
        region?: boolean | `@${string}`;
        __typename?: boolean | `@${string}`;
    }>;
    ['ChangeCard']: AliasType<{
        SpecialCard?: ResolverInputTypes['SpecialCard'];
        EffectCard?: ResolverInputTypes['EffectCard'];
        __typename?: boolean | `@${string}`;
    }>;
    ['SpecialCard']: AliasType<{
        effect?: boolean | `@${string}`;
        name?: boolean | `@${string}`;
        __typename?: boolean | `@${string}`;
    }>;
    ['Card']: AliasType<{
        Attack?: boolean | `@${string}`;
        Children?: boolean | `@${string}`;
        Defense?: boolean | `@${string}`;
        attack?: [
            {
                cardID: Array<string>;
            },
            ResolverInputTypes['Card']
        ];
        cardImage?: ResolverInputTypes['S3Object'];
        description?: boolean | `@${string}`;
        id?: boolean | `@${string}`;
        image?: boolean | `@${string}`;
        info?: boolean | `@${string}`;
        name?: boolean | `@${string}`;
        skills?: boolean | `@${string}`;
        __typename?: boolean | `@${string}`;
    }>;
    ['Nameable']: AliasType<{
        name?: boolean | `@${string}`;
        ['...on EffectCard']?: Omit<ResolverInputTypes['EffectCard'], keyof ResolverInputTypes['Nameable']>;
        ['...on SpecialCard']?: Omit<ResolverInputTypes['SpecialCard'], keyof ResolverInputTypes['Nameable']>;
        ['...on Card']?: Omit<ResolverInputTypes['Card'], keyof ResolverInputTypes['Nameable']>;
        ['...on CardStack']?: Omit<ResolverInputTypes['CardStack'], keyof ResolverInputTypes['Nameable']>;
        __typename?: boolean | `@${string}`;
    }>;
    ['CardStack']: AliasType<{
        cards?: ResolverInputTypes['Card'];
        name?: boolean | `@${string}`;
        __typename?: boolean | `@${string}`;
    }>;
    ['Mutation']: AliasType<{
        addCard?: [{
            card: ResolverInputTypes['createCard'];
        }, ResolverInputTypes['Card']];
        __typename?: boolean | `@${string}`;
    }>;
    ['JSON']: unknown;
    ['Subscription']: AliasType<{
        deck?: ResolverInputTypes['Card'];
        __typename?: boolean | `@${string}`;
    }>;
};
