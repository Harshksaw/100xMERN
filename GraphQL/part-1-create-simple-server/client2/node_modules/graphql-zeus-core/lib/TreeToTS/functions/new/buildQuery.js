"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalsBuildQuery = void 0;
const models_1 = require("./models");
const purifyGraphQLKey_1 = require("./purifyGraphQLKey");
const resolvePath_1 = require("./resolvePath");
const InternalsBuildQuery = ({ ops, props, returns, options, scalars, }) => {
    const ibb = (k, o, p = '', root = true, vars = []) => {
        var _a;
        const keyForPath = (0, purifyGraphQLKey_1.purifyGraphQLKey)(k);
        const newPath = [p, keyForPath].join(models_1.SEPARATOR);
        if (!o) {
            return '';
        }
        if (typeof o === 'boolean' || typeof o === 'number') {
            return k;
        }
        if (typeof o === 'string') {
            return `${k} ${o}`;
        }
        if (Array.isArray(o)) {
            const args = (0, resolvePath_1.InternalArgsBuilt)({
                props,
                returns,
                ops,
                scalars,
                vars,
            })(o[0], newPath);
            return `${ibb(args ? `${k}(${args})` : k, o[1], p, false, vars)}`;
        }
        if (k === '__alias') {
            return Object.entries(o)
                .map(([alias, objectUnderAlias]) => {
                if (typeof objectUnderAlias !== 'object' || Array.isArray(objectUnderAlias)) {
                    throw new Error('Invalid alias it should be __alias:{ YOUR_ALIAS_NAME: { OPERATION_NAME: { ...selectors }}}');
                }
                const operationName = Object.keys(objectUnderAlias)[0];
                const operation = objectUnderAlias[operationName];
                return ibb(`${alias}:${operationName}`, operation, p, false, vars);
            })
                .join('\n');
        }
        const hasOperationName = root && (options === null || options === void 0 ? void 0 : options.operationName) ? ' ' + options.operationName : '';
        const keyForDirectives = (_a = o.__directives) !== null && _a !== void 0 ? _a : '';
        const query = `{${Object.entries(o)
            .filter(([k]) => k !== '__directives')
            .map((e) => ibb(...e, [p, `field<>${keyForPath}`].join(models_1.SEPARATOR), false, vars))
            .join('\n')}}`;
        if (!root) {
            return `${k} ${keyForDirectives}${hasOperationName} ${query}`;
        }
        const varsString = vars.map((v) => `${v.name}: ${v.graphQLType}`).join(', ');
        return `${k} ${keyForDirectives}${hasOperationName}${varsString ? `(${varsString})` : ''} ${query}`;
    };
    return ibb;
};
exports.InternalsBuildQuery = InternalsBuildQuery;
//# sourceMappingURL=buildQuery.js.map