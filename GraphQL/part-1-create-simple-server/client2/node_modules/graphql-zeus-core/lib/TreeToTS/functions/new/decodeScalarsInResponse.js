"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.traverseResponse = exports.decodeScalarsInResponse = void 0;
const models_1 = require("./models");
const prepareScalarPaths_1 = require("./prepareScalarPaths");
const purifyGraphQLKey_1 = require("./purifyGraphQLKey");
const decodeScalarsInResponse = ({ response, scalars, returns, ops, initialZeusQuery, initialOp, }) => {
    if (!scalars) {
        return response;
    }
    const builder = (0, prepareScalarPaths_1.PrepareScalarPaths)({
        ops,
        returns,
    });
    const scalarPaths = builder(initialOp, ops[initialOp], initialZeusQuery);
    if (scalarPaths) {
        const r = (0, exports.traverseResponse)({ scalarPaths, resolvers: scalars })(initialOp, response, [ops[initialOp]]);
        return r;
    }
    return response;
};
exports.decodeScalarsInResponse = decodeScalarsInResponse;
const traverseResponse = ({ resolvers, scalarPaths, }) => {
    const ibb = (k, o, p = []) => {
        var _a;
        if (Array.isArray(o)) {
            return o.map((eachO) => ibb(k, eachO, p));
        }
        if (o == null) {
            return o;
        }
        const scalarPathString = p.join(models_1.SEPARATOR);
        const currentScalarString = scalarPaths[scalarPathString];
        if (currentScalarString) {
            const currentDecoder = (_a = resolvers[currentScalarString.split('.')[1]]) === null || _a === void 0 ? void 0 : _a.decode;
            if (currentDecoder) {
                return currentDecoder(o);
            }
        }
        if (typeof o === 'boolean' || typeof o === 'number' || typeof o === 'string' || !o) {
            return o;
        }
        const entries = Object.entries(o).map(([k, v]) => [k, ibb(k, v, [...p, (0, purifyGraphQLKey_1.purifyGraphQLKey)(k)])]);
        const objectFromEntries = entries.reduce((a, [k, v]) => {
            a[k] = v;
            return a;
        }, {});
        return objectFromEntries;
    };
    return ibb;
};
exports.traverseResponse = traverseResponse;
//# sourceMappingURL=decodeScalarsInResponse.js.map