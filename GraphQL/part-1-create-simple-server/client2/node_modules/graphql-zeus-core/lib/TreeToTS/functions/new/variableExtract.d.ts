import { GetVariableType, GraphQLVariableType, WithOptionalNullables } from "./types";
export declare type Variable<T extends GraphQLVariableType, Name extends string> = {
    ' __zeus_name': Name;
    ' __zeus_type': T;
};
export declare type ExtractVariablesDeep<Query> = Query extends Variable<infer VType, infer VName> ? {
    [key in VName]: GetVariableType<VType>;
} : Query extends string | number | boolean | Array<string | number | boolean> ? {} : UnionToIntersection<{
    [K in keyof Query]: WithOptionalNullables<ExtractVariablesDeep<Query[K]>>;
}[keyof Query]>;
export declare type ExtractVariables<Query> = Query extends Variable<infer VType, infer VName> ? {
    [key in VName]: GetVariableType<VType>;
} : Query extends [infer Inputs, infer Outputs] ? ExtractVariablesDeep<Inputs> & ExtractVariables<Outputs> : Query extends string | number | boolean | Array<string | number | boolean> ? {} : UnionToIntersection<{
    [K in keyof Query]: WithOptionalNullables<ExtractVariables<Query[K]>>;
}[keyof Query]>;
declare type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
export declare const START_VAR_NAME = "$ZEUS_VAR";
export declare const GRAPHQL_TYPE_SEPARATOR = "__$GRAPHQL__";
export declare const $: <Type extends GraphQLVariableType, Name extends string>(name: Name, graphqlType: Type) => Variable<Type, Name>;
export {};
