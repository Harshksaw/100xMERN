import { Ops, ScalarCoders } from "./mocks";
import { ScalarDefinition } from "./types";
export declare type AllTypesPropsType = {
    [x: string]: undefined | `scalar.${string}` | 'enum' | {
        [x: string]: undefined | string | {
            [x: string]: string | undefined;
        };
    };
};
export declare type ReturnTypesType = {
    [x: string]: {
        [x: string]: string | undefined;
    } | `scalar.${string}` | undefined;
};
export declare type InputValueType = {
    [x: string]: undefined | boolean | string | number | [any, undefined | boolean | InputValueType] | InputValueType;
};
export declare type VType = undefined | boolean | string | number | [any, undefined | boolean | InputValueType] | InputValueType;
export declare type PlainType = boolean | number | string | null | undefined;
export declare type ZeusArgsType = PlainType | {
    [x: string]: ZeusArgsType;
} | Array<ZeusArgsType>;
export declare type Operations = Record<string, string>;
export declare type VariableDefinition = {
    [x: string]: unknown;
};
export declare const SEPARATOR = "|";
export declare type fetchOptions = Parameters<typeof fetch>;
declare type websocketOptions = typeof WebSocket extends new (...args: infer R) => WebSocket ? R : never;
export declare type chainOptions = [fetchOptions[0], fetchOptions[1] & {
    websocket?: websocketOptions;
}] | [fetchOptions[0]];
export declare type FetchFunction = (query: string, variables?: Record<string, unknown>) => Promise<any>;
export declare type SubscriptionFunction = (query: string) => any;
declare type NotUndefined<T> = T extends undefined ? never : T;
export declare type ResolverType<F> = NotUndefined<F extends [infer ARGS, any] ? ARGS : undefined>;
export declare type OperationOptions = {
    operationName?: string;
};
export declare type ScalarCoder = Record<string, (s: unknown) => string>;
export interface GraphQLResponse {
    data?: Record<string, any>;
    errors?: Array<{
        message: string;
    }>;
}
export declare class GraphQLError extends Error {
    response: GraphQLResponse;
    constructor(response: GraphQLResponse);
    toString(): string;
}
export declare type GenericOperation<O> = O extends keyof typeof Ops ? typeof Ops[O] : never;
export declare type ThunderGraphQLOptions<SCLR extends ScalarDefinition> = {
    scalars?: SCLR | ScalarCoders;
};
export {};
